#include <WiFi.h>
#include <AsyncTCP.h>
#include <ESPAsyncWebServer.h>
#include <ArduinoJson.h>
#include <esp_wpa2.h> // Biblioteca para WPA Enterprise

// Configurações da Rede Wi-Fi Institucional
const char* ssid = "NOME_DA_REDE";  // Nome da rede institucional
const char* usuario = "MATRICULA_DO_ALUNO"; // Nome de usuário para autenticação
const char* senha = "SENHA_DO_PORTAL";      // Senha para autenticação

// Pinos dos botões
#define BOTAO_FRENTE 23
#define BOTAO_PULAR 22
#define BOTAO_TRAS 21

// Estados dos botões
int estadoFrente = HIGH;
int estadoPular = HIGH;
int estadoTras = HIGH;

// Servidor WebSocket
AsyncWebServer server(80);
AsyncWebSocket ws("/ws");

// Função para enviar estados dos botões via WebSocket
void enviarEstadosBotao() {
  StaticJsonDocument<200> json;
  json["frente"] = (estadoFrente == LOW);
  json["pular"] = (estadoPular == LOW);
  json["tras"] = (estadoTras == LOW);

  String mensagem;
  serializeJson(json, mensagem);
  ws.textAll(mensagem); // Envia a mensagem para todos os clientes conectados
}

void conectarWiFi() {
  WiFi.disconnect(true); // Desconectar caso esteja conectado a outra rede
  WiFi.mode(WIFI_STA);   // Configura o ESP32 no modo estação

  // Configurações WPA Enterprise
  esp_wifi_sta_wpa2_ent_set_identity((uint8_t*)usuario, strlen(usuario)); // Nome de usuário
  esp_wifi_sta_wpa2_ent_set_username((uint8_t*)usuario, strlen(usuario)); // Nome de usuário
  esp_wifi_sta_wpa2_ent_set_password((uint8_t*)senha, strlen(senha));     // Senha
  esp_wifi_sta_wpa2_ent_enable(); // Habilita WPA2 Enterprise

  WiFi.begin(ssid); // Conecta à rede
  Serial.print("Conectando ao Wi-Fi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  Serial.println("\nWi-Fi conectado!");
  Serial.println(WiFi.localIP()); // Exibe o IP do ESP32
}

void setup() {
  // Configuração dos pinos dos botões
  pinMode(BOTAO_FRENTE, INPUT_PULLUP);
  pinMode(BOTAO_PULAR, INPUT_PULLUP);
  pinMode(BOTAO_TRAS, INPUT_PULLUP);

  // Inicializa a comunicação serial
  Serial.begin(115200);

  // Conectar ao Wi-Fi
  conectarWiFi();

  // Configuração do WebSocket
  ws.onEvent([](AsyncWebSocket *server, AsyncWebSocketClient *client, AwsEventType type,
                void *arg, uint8_t *data, size_t len) {
    if (type == WS_EVT_CONNECT) {
      Serial.printf("Cliente conectado: %u\n", client->id());
    } else if (type == WS_EVT_DISCONNECT) {
      Serial.printf("Cliente desconectado: %u\n", client->id());
    }
  });
  server.addHandler(&ws);

  // Inicia o servidor
  server.begin();
}

void loop() {
  // Lê o estado dos botões
  int novoEstadoFrente = digitalRead(BOTAO_FRENTE);
  int novoEstadoPular = digitalRead(BOTAO_PULAR);
  int novoEstadoTras = digitalRead(BOTAO_TRAS);

  // Verifica alterações nos estados e envia via WebSocket
  if (novoEstadoFrente != estadoFrente || novoEstadoPular != estadoPular || novoEstadoTras != estadoTras) {
    estadoFrente = novoEstadoFrente;
    estadoPular = novoEstadoPular;
    estadoTras = novoEstadoTras;

    enviarEstadosBotao(); // Atualiza o Godot
  }

  delay(50); // Reduz a frequência de leitura
}
